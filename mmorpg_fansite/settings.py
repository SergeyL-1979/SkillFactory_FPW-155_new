"""
Django settings for mmorpg_fansite project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv(override=True)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # === django-allauth ===
    'allauth',
    'allauth.account',
    # 'allauth.socialaccount',
    # === django-ckeditor ====
    # 'ckeditor',
    # 'ckeditor_uploader',
    'django_ckeditor_5',
    # ===== Фильтры django-filter ====
    'django_filters',
    # ====== APPS ===========
    'fan_board.apps.FanBoardConfig',
    'users.apps.UsersConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # ===== Add the account middleware =====
    'allauth.account.middleware.AccountMiddleware',
    # ======================================
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mmorpg_fansite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mmorpg_fansite.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# STATIC_URL = 'static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ================== МОИ НАСТРОЙКИ =============================================
SITE_ID = 1

# ============ НАСТРОЙКИ CREDITOR-5 =========================================
# CKEDITOR_UPLOAD_PATH = 'uploads/'
# CKEDITOR_IMAGE_BACKEND = 'pillow'
STATIC_URL = '/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

customColorPalette = [
    {
        'color': 'hsl(4, 90%, 58%)',
        'label': 'Red'
    },
    {
        'color': 'hsl(340, 82%, 52%)',
        'label': 'Pink'
    },
    {
        'color': 'hsl(291, 64%, 42%)',
        'label': 'Purple'
    },
    {
        'color': 'hsl(262, 52%, 47%)',
        'label': 'Deep Purple'
    },
    {
        'color': 'hsl(231, 48%, 48%)',
        'label': 'Indigo'
    },
    {
        'color': 'hsl(207, 90%, 54%)',
        'label': 'Blue'
    },
]

# CKEDITOR_5_CUSTOM_CSS = 'path_to.css'  # optional
# CKEDITOR_5_FILE_STORAGE = "path_to_storage.CustomStorage"  # optional
CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link',
                    'bulletedList', 'numberedList', 'blockQuote', 'imageUpload', ],

    },
    'extends': {
        'blockToolbar': [
            'paragraph', 'heading1', 'heading2', 'heading3',
            '|',
            'bulletedList', 'numberedList',
            '|',
            'blockQuote',
        ],
        'toolbar': ['heading', '|', 'outdent', 'indent', '|', 'bold', 'italic', 'link', 'underline', 'strikethrough',
                    'code', 'subscript', 'superscript', 'highlight', '|', 'codeBlock', 'sourceEditing', 'insertImage',
                    'bulletedList', 'numberedList', 'todoList', '|', 'blockQuote', 'imageUpload', '|',
                    'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'mediaEmbed', 'removeFormat',
                    'insertTable', ],
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft',
                        'imageStyle:alignRight', 'imageStyle:alignCenter', 'imageStyle:side', '|'],
            'styles': [
                'full',
                'side',
                'alignLeft',
                'alignRight',
                'alignCenter',
            ]

        },
        'table': {
            'contentToolbar': ['tableColumn', 'tableRow', 'mergeTableCells',
                               'tableProperties', 'tableCellProperties'],
            'tableProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            },
            'tableCellProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            }
        },
        'heading': {
            'options': [
                {'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph'},
                {'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1'},
                {'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2'},
                {'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3'}
            ]
        }
    },
    'list': {
        'properties': {
            'styles': 'true',
            'startIndex': 'true',
            'reversed': 'true',
        }
    }
}

# ===========================================================================
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

# ============= Настройки электронной почты =========
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = os.environ.get('HOST_SMTP_YA')
EMAIL_PORT = os.environ.get('PORT_SMTP')
EMAIL_USE_TLS = True  # Здесь должно быть True, Иначе отправка не удалась
EMAIL_HOST_USER = os.environ.get('HOST_USER_YA')  # ваш QQ Номер счета и код авторизации
EMAIL_HOST_PASSWORD = os.environ.get('YANDEX_ID')
SERVER_EMAIL = EMAIL_HOST_USER
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
# =====================================================

# =========== Основные настройки allauth =================
LOGIN_URL = '/account/login/'
LOGIN_REDIRECT_URL = '/account/profile/'
LOGOUT_REDIRECT_URL = '/'

AUTH_USER_MODEL = 'users.CustomUser'
DOMAIN_NAME = os.environ.get('DOMAIN_NAME')

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
# ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_EMAIL_VERIFICATION = True
ACCOUNT_EMAIL_VERIFICATION = 'optional'
# ACCOUNT_EMAIL_VERIFICATION = 'none'  # или 'mandatory' или 'none' для необязательной верификации
# ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3  # срок действия подтверждения адреса электронной почты
# ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/'  # URL после успешной авторизации

ACCOUNT_FORMS = {
    'login': 'users.forms.UserLoginForm',
    'signup': 'users.forms.UserRegistrationForm',
    'change_password': 'users.forms.MyChangePasswordForm',
    'reset_password': 'users.forms.MyResetPasswordForm',
}
ACCOUNT_SIGNUP_TEMPLATE = 'allauth/account/signup.html'

# =========== НАСТРОЙКИ ДЛЯ CELERY =================================
REDIS_HOST = '0.0.0.0'
REDIS_PORT = '6379'

CELERY_BROKER_URL = 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/0'
CELERY_BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}

CELERY_RESULT_BACKEND = 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/0'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# =========== Блок логирования ======================================
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'debug_format': {
#             'format': '{asctime} {levelname} {message}',
#             'style': '{',
#         },
#         'warning_format': {
#             'format': '{asctime} {levelname} {message} {pathname}',
#             'style': '{',
#         },
#         'error_format': {
#             'format': '{asctime} {levelname} {message} {pathname} {exc_info}',
#             'style': '{',
#         },
#         'general_format': {
#             'format': '{asctime} {levelname} {message} {module}',
#             'style': '{',
#         },
#     },
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#         'require_debug_false': {
#             '()': 'django.utils.log.RequireDebugFalse',
#         },
#     },
#     'handlers': {
#         'console_debug': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             'formatter': 'debug_format',
#             'filters': ['require_debug_true'],
#         },
#         'console_warning': {
#             'level': 'WARNING',
#             'class': 'logging.StreamHandler',
#             'formatter': 'warning_format',
#             'filters': ['require_debug_true'],
#         },
#         'console_error': {
#             'level': 'ERROR',
#             'class': 'logging.StreamHandler',
#             'formatter': 'error_format',
#             'filters': ['require_debug_true'],
#         },
#         'console_critical': {
#             'level': 'ERROR',
#             'class': 'logging.StreamHandler',
#             'formatter': 'error_format',
#             'filters': ['require_debug_true'],
#         },
#         'general': {
#             'level': 'INFO',
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'log', 'general.log'), # Assuming BASE_DIR is defined
#             'formatter': 'general_format',
#             'filters': ['require_debug_false'],
#         },
#         'errors': {
#             'level': 'WARNING',
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'log', 'errors.log'), # Assuming BASE_DIR is defined
#             'formatter': 'general_format',
#             'filters': ['require_debug_false'],
#         },
#         'security': {
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'log', 'security.log'), # Assuming BASE_DIR is defined
#             'formatter': 'general_format',
#         },
#         'mail_admins': {
#             'level': 'ERROR',
#             'filters': ['require_debug_false'],
#             'class': 'django.utils.log.AdminEmailHandler',
#             'formatter': 'general_format',
#             'include_html': True,
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console_debug', 'console_warning', 'console_error', 'console_critical'],
#             'propagate': True,
#             'level': 'DEBUG',
#         },
#         'django.request': {
#             'handlers': ['errors', 'mail_admins'],
#             'propagate': True,
#             'level': 'DEBUG',
#         },
#         'django.server': {
#             'handlers': ['errors', 'mail_admins'],
#             'propagate': True,
#             'level': 'DEBUG',
#         },
#         'django.template': {
#             'handlers': ['errors'],
#             'propagate': True,
#             'level': 'DEBUG',
#         },
#         'django.db_backends': {
#             'handlers': ['errors'],
#             'propagate': True,
#             'level': 'DEBUG',
#         },
#         'django.security': {
#             'handlers': ['security'],
#             'propagate': True,
#             'level': 'DEBUG',
#         },
#     }
# }
# =================================================================================================

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file_debug': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'log', 'debug.log'),
#         },
#         'file_error': {
#             'level': 'ERROR',
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'log', 'error.log'),
#         },
#         'file_category': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'log', 'category.log'),
#         },
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             # 'formatter': 'debug_format',
#             # 'filters': ['require_debug_true'],
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['file_debug', 'file_error',],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#         __name__: {
#             'handlers': ['file_category', 'console',],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }
